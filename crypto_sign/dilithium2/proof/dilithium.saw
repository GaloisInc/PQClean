/* Dilithium Verification */
/* Authors: Ajay Kumar Eeralla and Aaron Tomb */

// Note: have to do this before llvm_load_module!
enable_lax_arithmetic;

//enable_experimental;
//enable_smt_array_memory_model;

dilithium2 <- llvm_load_module "../clean/bc/libdilithium2_clean.a.bc";
import "../../../cryptol-specs/Primitive/Asymmetric/Signature/DilithiumR2BV.cry";

let tm = crucible_term;

let verify m n ovs sat setup prover =
  crucible_llvm_unsafe_assume_spec m n setup;

let verify' = crucible_llvm_verify;

let assume m n ovs sat setup prover =
  crucible_llvm_unsafe_assume_spec m n setup;

let GLOBALS = do {
  crucible_alloc_global "zetas";
  crucible_alloc_global "zetas_inv";
  crucible_points_to (crucible_global "zetas") (crucible_global_initializer "zetas");
  crucible_points_to (crucible_global "zetas_inv") (crucible_global_initializer "zetas_inv");
  //crucible_points_to (crucible_global "KeccakF_RoundConstants") (crucible_global_initializer "KeccakF_RoundConstants");
};

let unint_prover nm unints =
  unint_yices unints;
  //assume_unsat;
  //offline_unint_smtlib2 unints nm;
  //quickcheck 100;

let prover nm = unint_prover nm [];

/*
typedef struct {
    uint32_t coeffs[N];
} poly;

typedef struct {
    poly vec[L];
} polyvecl;

typedef struct {
    poly vec[K];
} polyveck;
*/

let i8 = llvm_int 8;
let i32 = llvm_int 32;
let i64 = llvm_int 64;

let poly_type = llvm_array 1 (llvm_type "%struct.poly");
let polyvec_type n = llvm_array 1 (llvm_array n poly_type);

let ptr_to_fresh nm tp = do {
    x <- crucible_fresh_var nm tp;
    p <- crucible_alloc tp;
    crucible_points_to p (tm x);
    return (p, x);
};

let alloc_bytes n = crucible_alloc (llvm_array n i8);
let alloc_words n = crucible_alloc (llvm_array n i32);
let alloc_poly = crucible_alloc poly_type;
let alloc_polyvec n = crucible_alloc (polyvec_type n);

let fresh_poly nm = ptr_to_fresh nm poly_type;
let fresh_polyvec nm n = ptr_to_fresh nm (polyvec_type n);
let fresh_bytes nm n = ptr_to_fresh nm (llvm_array n i8);
let fresh_words nm n = ptr_to_fresh nm (llvm_array n i32);

let assign_fresh ty p nm = do {
    t <- crucible_fresh_var nm ty;
    crucible_points_to p (tm t);
};

let assign_fresh_poly = assign_fresh poly_type;
let assign_fresh_polyvec n = assign_fresh (polyvec_type n);
let assign_fresh_bytes n = assign_fresh (llvm_array n i8);

let prove_dilithium MODULE MODE = do {

// The following parameters from params.h

    let SEEDBYTES = 32;
    let CRHBYTES = 48;
    let N = 256;
    let Ndiv2 = 128;
    let Q = 8380417;
    let QBITS = 23;
    let ROOT_OF_UNITY = 1753;
    let D = 14;
    let GAMMA1 = eval_int {{(((`Q : [32]) - 1)/16) }};
    let GAMMA2 = eval_int {{ ((`GAMMA1 : [32])/2) }};
    let ALPHA = eval_int {{ (2*(`GAMMA2 : [32])) }};
    let QINV = 4236238847;


    // DilithiumII parameters
    let K = 4;
    let L = 3;
    let ETA = 6;
    let SETABITS = 4;
    let BETA = 325;
    let OMEGA = 80;


    let POLT1_SIZE_PACKED = eval_int {{ ((`N : [32])*((`QBITS : [32]) - (`D : [32]))/8) }};
    let POLT0_SIZE_PACKED = eval_int {{ (((`N : [32])*(`D : [32]))/8) }};
    let POLETA_SIZE_PACKED = eval_int {{ (((`N : [32])*(`SETABITS : [32]))/8) }};
    let POLZ_SIZE_PACKED = eval_int {{ (((`N : [32])*((`QBITS : [32]) - 3))/8) }};
    let POLW1_SIZE_PACKED = eval_int {{ (((`N : [32])*4)/8) }};

    let CRYPTO_PUBLICKEYBYTES = eval_int {{ ((`SEEDBYTES : [32]) + (`K : [32])* (`POLT1_SIZE_PACKED : [32])) }};
    let CRYPTO_SECRETKEYBYTES = eval_int  {{ (2*(`SEEDBYTES : [32]) + ((`L : [32]) + (`K : [32]))* ((`POLETA_SIZE_PACKED : [32]) + (`CRHBYTES:[32]) + (`K : [32])*(`POLT0_SIZE_PACKED : [32]))) }};
    let CRYPTO_BYTES = eval_int {{ ((`L : [32])*(`POLZ_SIZE_PACKED : [32]) + ((`OMEGA : [32]) + (`K : [32])) + ((`N : [32])/8 + 8)) }};

    // Cryptol utilities
    let {{
        montgomery_reduce : [64] -> [32]
        montgomery_reduce a = drop ((a + (((a * `QINV) && 0x00000000ffffffff) * `Q)) >> 32)

        reduce32 : [32] -> [32]
        reduce32 a = (a && 0x007FFFFF) + (b << 13) - b
          where b = a >> 23

        csubq : [32] -> [32]
        csubq a = b + ((b >>$ 31) && `Q)
          where b = a - `Q

        freeze a = csubq (reduce32 a)

        type impPoly = [1][n][32]
        type impPolyVec dim = [dim]impPoly

        IPtoP : impPoly -> poly
        IPtoP [p] = map (drop `{uint32_t-qbits}) p


        PtoIP : poly -> impPoly
        PtoIP p = [map (\i -> sext i) p]


        IPVtoPV : {dim} (fin dim, dim >= 1) => impPolyVec dim -> polyVec dim
        IPVtoPV intp = map IPtoP intp


        PVtoIPV : {dim} (fin dim, dim >= 1) => polyVec dim -> impPolyVec dim
        PVtoIPV pvec = map PtoIP pvec

        poly_add_imp : impPoly -> impPoly -> impPoly
        poly_add_imp = (+)

        poly_sub_imp : impPoly -> impPoly -> impPoly
        poly_sub_imp xs ys = [ [ x + 2*`Q - y | x <- xs@0 | y <- ys@0 ] ]

        poly_reduce_imp : impPoly -> impPoly
        poly_reduce_imp xs = [map reduce32 (xs@0)]

        poly_csubq_imp : impPoly -> impPoly
        poly_csubq_imp xs = [map csubq (xs@0)]

        poly_freeze_imp : impPoly -> impPoly
        poly_freeze_imp xs = [map freeze (xs@0)]

        poly_shiftl_imp : impPoly -> impPoly
        poly_shiftl_imp xs = [ [ x << `D | x <- (xs@0)] ]

        coeff_bound low high c = low <$ c /\ c <$ high

        coeff_bound' low high c = low <=$ c /\ c <$ high

        polybound : [32] -> [32] -> impPoly -> Bit
        polybound low high [xs] = all (coeff_bound low high) xs

        polybound' : [32] -> [32] -> impPoly -> Bit
        polybound' low high [xs] = all (coeff_bound' low high) xs

        pack_polyeta_imp : impPolyVec 1 -> [POLETA_SIZE_PACKED][8]
        pack_polyeta_imp a = split (pack_polyeta (IPVtoPV a))

        pack_pk_imp : [SEEDBYTES][8] -> impPolyVec k -> [CRYPTO_PUBLICKEYBYTES][8]
        pack_pk_imp rho t1 = split (pack_pk rho (IPVtoPV t1))

        ntt_imp : impPoly -> impPoly
        ntt_imp a = PtoIP (ntt (IPtoP a))

        nttinv_imp : impPoly -> impPoly
        nttinv_imp a = PtoIP (nttinv (IPtoP a))

        standard a = a < `Q

        reduced_bound a = 0 <=$ a /\ a <$ 2*`Q

        standard_poly [p] = all standard p

        standard_polyvec [v] = all standard_poly v


    }};

    let randombytes_setup = do {
      let sizetm = {{ 3 * `SEEDBYTES : [64] }};
      bp <- alloc_bytes (eval_int sizetm);
      crucible_execute_func [bp, tm sizetm];
      b <- crucible_fresh_var "b" (llvm_array (eval_int sizetm) i8);
      crucible_points_to bp (tm b);
      crucible_return (tm {{ 0 : [32] }});
    };
    // NB: we aren't going to verify this function
    randombytes_method_spec <- assume MODULE "randombytes" [] false randombytes_setup (prover "randombytes");

    let PQCLEAN_DILITHIUM2_CLEAN_polyw1_pack_setup = do {
      rp <- alloc_bytes 128;
      (ap, a) <- fresh_poly "a";
      crucible_execute_func [rp, ap];
      res <- crucible_fresh_var "res" (llvm_array 128 (llvm_int 8));
      crucible_points_to rp (tm res);
      crucible_points_to rp (tm res);
      crucible_postcond {{ join res == join [ join [ xs@0 || (xs@1 << 4) | xs <- split p : [128][2][_] ] | p <- (map (\p -> map (\x -> drop`{24} x:[8]) p) a) ] }};
    };
    PQCLEAN_DILITHIUM2_CLEAN_polyw1_pack_method_spec <- verify' MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyw1_pack" [] false PQCLEAN_DILITHIUM2_CLEAN_polyw1_pack_setup (prover "polyw1_pack");

    let PQCLEAN_DILITHIUM2_CLEAN_challenge_setup = do {
      cp <- alloc_poly;
      (mup, mu) <- fresh_bytes "mu" CRHBYTES;
      (w1p, w1) <- fresh_polyvec "w1" K;
      crucible_execute_func [cp, mup, w1p];
      //res <- crucible_fresh_var "res" (llvm_array 1 (llvm_type "%struct.poly"));
      //crucible_points_to arg0 (tm res);
      //crucible_postcond {{ zero == zero }};
    };
    // NB: we aren't going to verify this function
    PQCLEAN_DILITHIUM2_CLEAN_challenge_method_spec <- assume MODULE "PQCLEAN_DILITHIUM2_CLEAN_challenge" [PQCLEAN_DILITHIUM2_CLEAN_polyw1_pack_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_challenge_setup (prover "challenge");

   /* let keccak_absorb_ones_spec n RATE  = do {
        s <- crucible_fresh_var "s" llvm_array 25 (llvm_int 64);
        sp <- crucible_alloc llvm_array 25 (llvm_int 64);
        crucible_points_to sp (tm s);
        r <- crucible_fresh_var "r" i32;
        m <- crucible_fresh_var "s" llvm_array n (llvm_int 8);
        mp <- crucible_alloc llvm_array n (llvm_int 8);
        crucible_points_to mp (tm m);
        mlen <- crucible_fresh_var "mlen" (llvm_int 64);
        //p <- crucible_fresh_var "p" i8;
        crucible_precond {{  r== (`RATE:[32]) /\ (mlen == (`n:[64]))}};
        crucible_execute_func [sp, (tm r), mp, (tm mlen), (tm {{0x1f:[8]}})];
        res <- crucible_fresh_var "res" state_t;
        crucible_points_to sp (tm {{res}});
        crucible_postcond {{ res == join (transpose ((transpose (split s:[5][5][64]))^(unflatten`{w=64} (join (pad`{r= (RATE*8)} (join [reverse x | x<-m]# 0b1111))))))  }} ;
    };*/

   /* let PQCLEAN_DILITHIUM2_CLEAN_shake128_stream_init_setup = do {
      arg0_star <- crucible_fresh_var "arg0" (llvm_array 25 (llvm_type "%struct.shake128ctx"));
      //arg0_star <- crucible_fresh_var "arg0" (llvm_array 25 (llvm_int 64));
      arg0 <- crucible_alloc (llvm_array 25 (llvm_type "%struct.shake128ctx"));
     // arg0 <- crucible_alloc (llvm_array 25 (llvm_int 64));
      crucible_points_to arg0 (tm arg0_star);
      arg1_star <- crucible_fresh_var "arg1" (llvm_array 34 (llvm_int 8));
      arg1 <- crucible_alloc (llvm_array 34 (llvm_int 8));
      crucible_points_to arg1 (tm arg1_star);
      arg2 <- crucible_fresh_var "arg2" (llvm_int 16);
      crucible_execute_func [arg0, arg1, (tm arg2)];
      //crucible_postcond {{ True == True }};
    };
    PQCLEAN_DILITHIUM2_CLEAN_shake128_stream_init_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_shake128_stream_init" [] false PQCLEAN_DILITHIUM2_CLEAN_shake128_stream_init_setup (prover "shake128_stream_init");
*/

    let PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_setup = do {
      ap <- alloc_poly;
      (seedp, seed) <- fresh_bytes "seed" SEEDBYTES;
      nonce <- crucible_fresh_var "nonce" (llvm_int 16);
      crucible_execute_func [ap, seedp, tm nonce];
      crucible_points_to seedp (tm seed);
      assign_fresh_poly ap "a";
    };
    // NB: we aren't going to verify this function
    PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_method_spec <- assume MODULE "PQCLEAN_DILITHIUM2_CLEAN_poly_uniform" [/*PQCLEAN_DILITHIUM2_CLEAN_shake128_stream_init_method_spec*/] false PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_setup (prover "poly_uniform");

    let PQCLEAN_DILITHIUM2_CLEAN_expand_mat_setup = do {
      matp <- crucible_alloc (llvm_array K (polyvec_type L));
      (rhop, rho) <- fresh_bytes "rho" SEEDBYTES;
      crucible_execute_func [matp, rhop];
      crucible_points_to rhop (tm rho);
      assign_fresh (llvm_array K (polyvec_type L)) matp "mat";
    };
    PQCLEAN_DILITHIUM2_CLEAN_expand_mat_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_expand_mat" [PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_expand_mat_setup (prover "expand_mat");

    let PQCLEAN_DILITHIUM2_CLEAN_polyz_pack_setup = do {
      rp <- alloc_bytes POLZ_SIZE_PACKED;
      (ap, a) <- fresh_poly "a";
      crucible_precond {{ polybound (0 - (`GAMMA1 - 1)) (`GAMMA1 - 1) a }};
      crucible_execute_func [rp, ap];
      crucible_points_to ap (tm a);
      assign_fresh_bytes POLZ_SIZE_PACKED rp "r";
    };
    PQCLEAN_DILITHIUM2_CLEAN_polyz_pack_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyz_pack" [] false PQCLEAN_DILITHIUM2_CLEAN_polyz_pack_setup (prover "polyz_pack");

    let PQCLEAN_DILITHIUM2_CLEAN_pack_sig_setup = do {
      sigp <- alloc_bytes CRYPTO_BYTES;
      (zp, z) <- fresh_polyvec "z" L;
      (hp, h) <- fresh_polyvec "h" K;
      (cp, c) <- fresh_poly "c";
      crucible_execute_func [sigp, zp, hp, cp];
      crucible_points_to zp (tm z);
      crucible_points_to hp (tm h);
      crucible_points_to cp (tm c);
      assign_fresh_bytes CRYPTO_BYTES sigp "sig";
    };
    // TODO: hangs applying override, using tons of memory
    PQCLEAN_DILITHIUM2_CLEAN_pack_sig_method_spec <- assume MODULE "PQCLEAN_DILITHIUM2_CLEAN_pack_sig" [PQCLEAN_DILITHIUM2_CLEAN_polyz_pack_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_pack_sig_setup (prover "pack_sig");

    let PQCLEAN_DILITHIUM2_CLEAN_montgomery_reduce_setup = do {
      a <- crucible_fresh_var "a" i64;
      crucible_precond {{ a <= `Q*(2^^32) }};
      crucible_execute_func [tm a];
      let res = {{ montgomery_reduce a }};
      crucible_return (tm res);
      crucible_postcond {{ reduced_bound res }};
    };
    PQCLEAN_DILITHIUM2_CLEAN_montgomery_reduce_method_spec <- verify' MODULE "PQCLEAN_DILITHIUM2_CLEAN_montgomery_reduce" [] false PQCLEAN_DILITHIUM2_CLEAN_montgomery_reduce_setup (prover "montgomery_reduce");

    let PQCLEAN_DILITHIUM2_CLEAN_invntt_frominvmont_setup = do {
      (pp, p) <- fresh_words "p" N;
      crucible_execute_func [pp];
      //res <- crucible_fresh_var "res" (llvm_array N i32);
    };
    PQCLEAN_DILITHIUM2_CLEAN_invntt_frominvmont_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_invntt_frominvmont" [PQCLEAN_DILITHIUM2_CLEAN_montgomery_reduce_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_invntt_frominvmont_setup (prover "invntt_frominvmont");

    let PQCLEAN_DILITHIUM2_CLEAN_poly_invntt_montgomery_setup = do {
      (ap, a) <- fresh_poly "a";
      crucible_execute_func [ap];
      crucible_points_to ap (tm {{ nttinv_imp a }});
    };
    PQCLEAN_DILITHIUM2_CLEAN_poly_invntt_montgomery_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_poly_invntt_montgomery" [PQCLEAN_DILITHIUM2_CLEAN_invntt_frominvmont_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_poly_invntt_montgomery_setup (prover "invntt_montgomery");

    let PQCLEAN_DILITHIUM2_CLEAN_ntt_setup = do {
      (ap, a) <- fresh_poly "a";
      crucible_execute_func [ap];
      crucible_points_to ap (tm {{ ntt_imp a }});
    };
    PQCLEAN_DILITHIUM2_CLEAN_ntt_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_ntt" [PQCLEAN_DILITHIUM2_CLEAN_montgomery_reduce_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_ntt_setup (prover "ntt");

    let PQCLEAN_DILITHIUM2_CLEAN_poly_ntt_setup = do {
      (ap, a) <- fresh_poly "a";
      crucible_execute_func [ap];
      //arg0_star <- crucible_fresh_var "r" poly_type;
      //crucible_points_to ap (tm arg0_star);
    };
    PQCLEAN_DILITHIUM2_CLEAN_poly_ntt_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_poly_ntt" [PQCLEAN_DILITHIUM2_CLEAN_ntt_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_poly_ntt_setup (prover "poly_ntt");

    let PQCLEAN_DILITHIUM2_CLEAN_poly_pointwise_invmontgomery_setup = do {
      cp <- alloc_poly;
      (ap, a) <- fresh_poly "a";
      (bp, b) <- fresh_poly "b";
      crucible_execute_func [cp, ap, bp];
      crucible_points_to ap (tm a);
      crucible_points_to bp (tm b);
      assign_fresh_poly cp "c";
    };
    PQCLEAN_DILITHIUM2_CLEAN_poly_pointwise_invmontgomery_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_poly_pointwise_invmontgomery" [PQCLEAN_DILITHIUM2_CLEAN_montgomery_reduce_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_poly_pointwise_invmontgomery_setup (prover "poly_pointwise_invmontgomery");

    let PQCLEAN_DILITHIUM2_CLEAN_reduce32_setup = do {
      a <- crucible_fresh_var "a" i32;
      crucible_execute_func [tm a];
      let res = {{ reduce32 a }};
      crucible_return (tm res);
      crucible_postcond {{ reduced_bound res }};
    };
    PQCLEAN_DILITHIUM2_CLEAN_reduce32_method_spec <- verify' MODULE "PQCLEAN_DILITHIUM2_CLEAN_reduce32" [] false PQCLEAN_DILITHIUM2_CLEAN_reduce32_setup (prover "reduce32");

    let PQCLEAN_DILITHIUM2_CLEAN_poly_reduce_setup = do {
      (ap, a) <- fresh_poly "a";
      crucible_execute_func [ap];
      crucible_points_to ap (tm {{ poly_reduce_imp a }});
      // crucible_postcond {{ polybound  ... a }}; // TODO
    };
    PQCLEAN_DILITHIUM2_CLEAN_poly_reduce_method_spec <- verify' MODULE "PQCLEAN_DILITHIUM2_CLEAN_poly_reduce" [PQCLEAN_DILITHIUM2_CLEAN_reduce32_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_poly_reduce_setup (prover "poly_reduce");

    let PQCLEAN_DILITHIUM2_CLEAN_shake256_stream_init_setup = do {
      arg0_star <- crucible_fresh_var "arg0" (llvm_type "%struct.shake128ctx");
      arg0 <- crucible_alloc (llvm_type "%struct.shake128ctx");
      crucible_points_to arg0 (tm arg0_star);
      arg1_star <- crucible_fresh_var "arg1" (llvm_int 8);
      arg1 <- crucible_alloc (llvm_int 8);
      crucible_points_to arg1 (tm arg1_star);
      arg2 <- crucible_fresh_var "arg2" (llvm_int 16);
      crucible_execute_func [arg0, arg1, tm arg2];
    };
    // NB: we aren't going to verify this function
    PQCLEAN_DILITHIUM2_CLEAN_shake256_stream_init_method_spec <- assume MODULE "PQCLEAN_DILITHIUM2_CLEAN_shake256_stream_init" [] false PQCLEAN_DILITHIUM2_CLEAN_shake256_stream_init_setup (prover "shake256_stream_init");

    let PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_gamma1m1_setup = do {
      ap <- alloc_poly;
      (seedp, seed) <- fresh_bytes "seed" CRHBYTES;
      nonce <- crucible_fresh_var "nonce" (llvm_int 16);
      crucible_execute_func [ap, seedp, tm nonce];
    };
    // NB: we aren't going to verify this function
    PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_gamma1m1_method_spec <- assume MODULE "PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_gamma1m1" [PQCLEAN_DILITHIUM2_CLEAN_shake256_stream_init_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_gamma1m1_setup (prover "poly_uniform_gamma1m1");

    let PQCLEAN_DILITHIUM2_CLEAN_poly_add_setup = do {
      cp <- alloc_poly;
      (ap, a) <- fresh_poly "a";
      (bp, b) <- fresh_poly "b";
      crucible_execute_func [cp, ap, bp];
      crucible_points_to ap (tm a);
      crucible_points_to bp (tm b);
      crucible_points_to cp (tm {{ poly_add_imp a b }});
    };
    PQCLEAN_DILITHIUM2_CLEAN_poly_add_method_spec <- verify' MODULE "PQCLEAN_DILITHIUM2_CLEAN_poly_add" [] false PQCLEAN_DILITHIUM2_CLEAN_poly_add_setup (prover "poly_add");

    let PQCLEAN_DILITHIUM2_CLEAN_poly_add_setup2 = do {
      (ap, a) <- fresh_poly "a";
      (bp, b) <- fresh_poly "b";
      crucible_execute_func [ap, ap, bp];
      crucible_points_to bp (tm b);
      crucible_points_to ap (tm {{ poly_add_imp a b }});
    };
    PQCLEAN_DILITHIUM2_CLEAN_poly_add_method_spec2 <- verify' MODULE "PQCLEAN_DILITHIUM2_CLEAN_poly_add" [] false PQCLEAN_DILITHIUM2_CLEAN_poly_add_setup2 (prover "poly_add");

    let PQCLEAN_DILITHIUM2_CLEAN_polyveck_add_setup = do {
      wp <- alloc_polyvec K;
      (up, u) <- fresh_polyvec "u" K;
      (vp, v) <- fresh_polyvec "v" K;
      crucible_execute_func [wp, up, vp];
    };
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_add_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyveck_add" [PQCLEAN_DILITHIUM2_CLEAN_poly_add_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_polyveck_add_setup (prover "polyveck_add");

    let PQCLEAN_DILITHIUM2_CLEAN_poly_chknorm_setup = do {
      (ap, a) <- fresh_poly "a";
      arg1 <- crucible_fresh_var "arg1" (llvm_int 32);
      crucible_execute_func [ap, tm arg1];
      ret <- crucible_fresh_var "return" (llvm_int 32);
      crucible_return (tm ret);
    };
    PQCLEAN_DILITHIUM2_CLEAN_poly_chknorm_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_poly_chknorm" [] false PQCLEAN_DILITHIUM2_CLEAN_poly_chknorm_setup (prover "poly_chknorm");

    let PQCLEAN_DILITHIUM2_CLEAN_polyveck_chknorm_setup = do {
      (ap, a) <- fresh_polyvec "a" K;
      arg1 <- crucible_fresh_var "arg1" (llvm_int 32);
      crucible_execute_func [ap, tm arg1];
      ret <- crucible_fresh_var "return" (llvm_int 32);
      crucible_return (tm ret);
    };
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_chknorm_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyveck_chknorm" [PQCLEAN_DILITHIUM2_CLEAN_poly_chknorm_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_polyveck_chknorm_setup (prover "polyveck_chknorm");

    let PQCLEAN_DILITHIUM2_CLEAN_csubq_setup = do {
      a <- crucible_fresh_var "a" i32;
      // crucible_precond {{ a < 2*`Q }}; // NB: not in comments in C code
      crucible_execute_func [tm a];
      let res = {{ csubq a }};
      crucible_return (tm res);
      // crucible_postcond {{ standard res }}; // NB: not in comments in C code
    };
    PQCLEAN_DILITHIUM2_CLEAN_csubq_method_spec <- verify' MODULE "PQCLEAN_DILITHIUM2_CLEAN_csubq" [] false PQCLEAN_DILITHIUM2_CLEAN_csubq_setup (prover "csubq");

    let PQCLEAN_DILITHIUM2_CLEAN_poly_csubq_setup = do {
      (ap, a) <- fresh_poly "a";
      crucible_execute_func [ap];
      crucible_points_to ap (tm {{ poly_csubq_imp a }});
    };
    PQCLEAN_DILITHIUM2_CLEAN_poly_csubq_method_spec <- verify' MODULE "PQCLEAN_DILITHIUM2_CLEAN_poly_csubq" [PQCLEAN_DILITHIUM2_CLEAN_csubq_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_poly_csubq_setup (prover "poly_csubq");

    let PQCLEAN_DILITHIUM2_CLEAN_polyveck_csubq_setup = do {
      (ap, a) <- fresh_polyvec "a" K;
      crucible_execute_func [ap];
    };
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_csubq_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyveck_csubq" [PQCLEAN_DILITHIUM2_CLEAN_poly_csubq_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_polyveck_csubq_setup (prover "polyveckcsubq");

    let PQCLEAN_DILITHIUM2_CLEAN_decompose_setup = do {
      a <- crucible_fresh_var "a" (llvm_int 32);
      a0p <- crucible_alloc (llvm_int 32);
      crucible_precond {{ standard a }};
      crucible_execute_func [tm a, a0p];
      let res = {{ Decompose `Q (drop a, `ALPHA) }};
      let a0 = {{ sext (res.1) : [32] }};
      let a1 = {{ sext (res.0) : [32] }};
      crucible_points_to a0p (tm {{ `Q + a0 }});
      crucible_return (tm {{ a1 }});
      crucible_postcond {{ (0 - `ALPHA/2) <=$ a0 }};
      crucible_postcond {{
        if a1 == 0
        then True /* a0 == (a % `Q) - `Q  /\ a0 <$ 0 */ // TODO!
        else a % `Q == a1*`ALPHA + a0 /\ a0 <=$ `ALPHA/2
      }};
    };
    PQCLEAN_DILITHIUM2_CLEAN_decompose_method_spec <- verify' MODULE "PQCLEAN_DILITHIUM2_CLEAN_decompose" [] false PQCLEAN_DILITHIUM2_CLEAN_decompose_setup (prover "decompose");

    let PQCLEAN_DILITHIUM2_CLEAN_poly_decompose_setup = do {
      a0p <- alloc_poly;
      a1p <- alloc_poly;
      (ap, a) <- fresh_poly "a";
      crucible_precond {{ standard_poly a }};
      crucible_execute_func [a0p, a1p, ap];
      let res = {{ DecomposePoly `ALPHA (IPtoP a) }};
      crucible_points_to a0p (tm {{ PtoIP (res.1) }});
      crucible_points_to a1p (tm {{ PtoIP (res.0) }});
    };
    // TODO: counterexample, but takes a little while
    PQCLEAN_DILITHIUM2_CLEAN_poly_decompose_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_poly_decompose" [PQCLEAN_DILITHIUM2_CLEAN_decompose_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_poly_decompose_setup (unint_prover "poly_decompose" ["Decompose"]);

    let PQCLEAN_DILITHIUM2_CLEAN_polyveck_decompose_setup = do {
      v0p <- alloc_polyvec K;
      v1p <- alloc_polyvec K;
      (vp, v) <- fresh_polyvec "v" K;
      crucible_precond {{ standard_polyvec v }};
      crucible_execute_func [v0p, v1p, vp];
      let res = {{ DecomposeV (IPVtoPV (v@0), `ALPHA) }};
      crucible_points_to v0p (tm {{ [PVtoIPV (res.1)] }});
      crucible_points_to v1p (tm {{ [PVtoIPV (res.0)] }});
    };
    // Note: works but slow
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_decompose_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyveck_decompose" [PQCLEAN_DILITHIUM2_CLEAN_poly_decompose_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_polyveck_decompose_setup (unint_prover "polyveck_decompose" ["DecomposePoly"]);

    let PQCLEAN_DILITHIUM2_CLEAN_freeze_setup = do {
      a <- crucible_fresh_var "a" i32;
      crucible_execute_func [tm a];
      let res = {{ freeze a }};
      crucible_return (tm res);
      crucible_postcond {{ res < `Q }};
      //crucible_postcond {{ res == a % `Q }}; // Note: hard to prove
    };
    PQCLEAN_DILITHIUM2_CLEAN_freeze_method_spec <- verify' MODULE "PQCLEAN_DILITHIUM2_CLEAN_freeze" [PQCLEAN_DILITHIUM2_CLEAN_reduce32_method_spec, PQCLEAN_DILITHIUM2_CLEAN_csubq_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_freeze_setup (prover "freeze");

    let PQCLEAN_DILITHIUM2_CLEAN_poly_freeze_setup = do {
      (ap, a) <- fresh_poly "a";
      crucible_execute_func [ap];
      crucible_points_to ap (tm {{ poly_freeze_imp a }});
    };
    PQCLEAN_DILITHIUM2_CLEAN_poly_freeze_method_spec <- verify' MODULE "PQCLEAN_DILITHIUM2_CLEAN_poly_freeze" [PQCLEAN_DILITHIUM2_CLEAN_freeze_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_poly_freeze_setup (prover "poly_freeze");

    let PQCLEAN_DILITHIUM2_CLEAN_polyveck_freeze_setup = do {
      (ap, a) <- fresh_polyvec "a" K;
      crucible_execute_func [ap];
    };
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_freeze_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyveck_freeze" [PQCLEAN_DILITHIUM2_CLEAN_poly_freeze_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_polyveck_freeze_setup (prover "polyveck_freeze");

    // TODO: this isn't correct yet
    let PQCLEAN_DILITHIUM2_CLEAN_make_hint_setup = do {
      arg0 <- crucible_fresh_var "arg0" (llvm_int 32);
      arg1 <- crucible_fresh_var "arg1" (llvm_int 32);
      crucible_precond {{ standard arg0 }};
      crucible_precond {{ standard arg1 }};
      crucible_execute_func [tm arg0, tm arg1];
      let res = {{ MakeHint `Q (drop arg0, drop arg1, `ALPHA) }};
      crucible_return (tm {{ zext [res] : [32] }});
    };
    PQCLEAN_DILITHIUM2_CLEAN_make_hint_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_make_hint" [] false PQCLEAN_DILITHIUM2_CLEAN_make_hint_setup (prover "make_hint");

    let PQCLEAN_DILITHIUM2_CLEAN_poly_make_hint_setup = do {
      hp <- alloc_poly;
      (a0p, a0) <- fresh_poly "a0";
      (a1p, a1) <- fresh_poly "a1";
      crucible_execute_func [hp, a0p, a1p];
      ret <- crucible_fresh_var "return" (llvm_int 32);
      crucible_return (tm ret);
    };
    PQCLEAN_DILITHIUM2_CLEAN_poly_make_hint_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_poly_make_hint" [PQCLEAN_DILITHIUM2_CLEAN_make_hint_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_poly_make_hint_setup (prover "poly_make_hint");

    let PQCLEAN_DILITHIUM2_CLEAN_polyveck_make_hint_setup = do {
      hp <- alloc_polyvec K;
      (v0p, v0) <- fresh_polyvec "v0" K;
      (v1p, v0) <- fresh_polyvec "v1" K;
      crucible_execute_func [hp, v0p, v1p];
      ret <- crucible_fresh_var "return" (llvm_int 32);
      crucible_return (tm ret);
    };
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_make_hint_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyveck_make_hint" [PQCLEAN_DILITHIUM2_CLEAN_poly_make_hint_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_polyveck_make_hint_setup (prover "polyveck_make_hint");

    let PQCLEAN_DILITHIUM2_CLEAN_polyveck_ntt_setup = do {
      (vp, v) <- fresh_polyvec "v" K;
      crucible_execute_func [vp];
    };
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_ntt_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyveck_ntt" [PQCLEAN_DILITHIUM2_CLEAN_poly_ntt_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_polyveck_ntt_setup (prover "polyveck_ntt");

    let PQCLEAN_DILITHIUM2_CLEAN_poly_sub_setup = do {
      cp <- alloc_poly;
      (ap, a) <- fresh_poly "a";
      (bp, b) <- fresh_poly "b";
      crucible_execute_func [cp, ap, bp];
      crucible_points_to ap (tm a);
      crucible_points_to bp (tm b);
      crucible_points_to cp (tm {{ poly_sub_imp a b }});
    };
    PQCLEAN_DILITHIUM2_CLEAN_poly_sub_method_spec <- verify' MODULE "PQCLEAN_DILITHIUM2_CLEAN_poly_sub" [] false PQCLEAN_DILITHIUM2_CLEAN_poly_sub_setup (prover "poly_sub");

    let PQCLEAN_DILITHIUM2_CLEAN_polyveck_sub_setup = do {
      wp <- alloc_polyvec K;
      (up, u) <- fresh_polyvec "u" K;
      (vp, v) <- fresh_polyvec "v" K;
      crucible_execute_func [wp, up, vp];
    };
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_sub_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyveck_sub" [PQCLEAN_DILITHIUM2_CLEAN_poly_sub_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_polyveck_sub_setup (prover "polyveck_sub");

    let PQCLEAN_DILITHIUM2_CLEAN_polyvecl_add_setup = do {
      (wp, w) <- fresh_polyvec "w" L;
      (up, u) <- fresh_polyvec "u" L;
      (vp, v) <- fresh_polyvec "v" L;
      crucible_execute_func [wp, up, vp];
    };
    PQCLEAN_DILITHIUM2_CLEAN_polyvecl_add_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyvecl_add" [PQCLEAN_DILITHIUM2_CLEAN_poly_add_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_polyvecl_add_setup (prover "polyvecl_add");

    let PQCLEAN_DILITHIUM2_CLEAN_polyvecl_chknorm_setup = do {
      (ap, a) <- fresh_polyvec "a" L;
      arg1 <- crucible_fresh_var "arg1" (llvm_int 32);
      crucible_execute_func [ap, tm arg1];
      ret <- crucible_fresh_var "return" (llvm_int 32);
      crucible_return (tm ret);
    };
    PQCLEAN_DILITHIUM2_CLEAN_polyvecl_chknorm_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyvecl_chknorm" [PQCLEAN_DILITHIUM2_CLEAN_poly_chknorm_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_polyvecl_chknorm_setup (prover "polyvecl_chknorm");

    let PQCLEAN_DILITHIUM2_CLEAN_polyvecl_freeze_setup = do {
      (vp, v) <- fresh_polyvec "v" L;
      crucible_execute_func [vp];
    };
    PQCLEAN_DILITHIUM2_CLEAN_polyvecl_freeze_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyvecl_freeze" [PQCLEAN_DILITHIUM2_CLEAN_poly_freeze_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_polyvecl_freeze_setup (prover "polyvecl_freeze");

    let PQCLEAN_DILITHIUM2_CLEAN_polyvecl_ntt_setup = do {
      (vp, v) <- fresh_polyvec "v" L;
      crucible_execute_func [vp];
    };
    PQCLEAN_DILITHIUM2_CLEAN_polyvecl_ntt_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyvecl_ntt" [PQCLEAN_DILITHIUM2_CLEAN_poly_ntt_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_polyvecl_ntt_setup (prover "polyvecl_ntt");

    let PQCLEAN_DILITHIUM2_CLEAN_polyvecl_pointwise_acc_invmontgomery_setup = do {
      wp <- alloc_polyvec K;
      (up, u) <- fresh_polyvec "u" K;
      (vp, v) <- fresh_polyvec "v" K;
      crucible_execute_func [wp, up, vp];
    };
    PQCLEAN_DILITHIUM2_CLEAN_polyvecl_pointwise_acc_invmontgomery_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyvecl_pointwise_acc_invmontgomery" [PQCLEAN_DILITHIUM2_CLEAN_poly_add_method_spec2, PQCLEAN_DILITHIUM2_CLEAN_poly_pointwise_invmontgomery_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_polyvecl_pointwise_acc_invmontgomery_setup (prover "polyvecl_pointwise_acc_invmontgomery");

    let PQCLEAN_DILITHIUM2_CLEAN_polyeta_unpack_setup = do {
      rp <- alloc_poly;
      (ap, a) <- fresh_bytes "a" POLETA_SIZE_PACKED;
      crucible_execute_func [rp, ap];
      // crucible_points_to rp {{ unpack_polyeta a }}; // TODO: no Cryptol spec yet
    };
    PQCLEAN_DILITHIUM2_CLEAN_polyeta_unpack_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyeta_unpack" [] false PQCLEAN_DILITHIUM2_CLEAN_polyeta_unpack_setup (prover "polyeta_unpack");

    let PQCLEAN_DILITHIUM2_CLEAN_polyt0_unpack_setup = do {
      rp <- alloc_poly;
      (ap, a) <- fresh_bytes "a" POLT0_SIZE_PACKED;
      crucible_execute_func [rp, ap];
    };
    PQCLEAN_DILITHIUM2_CLEAN_polyt0_unpack_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyt0_unpack" [] false PQCLEAN_DILITHIUM2_CLEAN_polyt0_unpack_setup (prover "polyt0_unpack");

    let PQCLEAN_DILITHIUM2_CLEAN_unpack_sk_setup = do {
      rhop <- alloc_bytes SEEDBYTES;
      keyp <- alloc_bytes SEEDBYTES;
      trp <- alloc_bytes CRHBYTES;
      s1p <- alloc_polyvec L;
      s2p <- alloc_polyvec K;
      t0p <- alloc_polyvec K;
      (skp, sk) <- fresh_bytes "sk" CRYPTO_SECRETKEYBYTES;
      crucible_execute_func [rhop, keyp, trp, s1p, s2p, t0p, skp];
    };
    PQCLEAN_DILITHIUM2_CLEAN_unpack_sk_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_unpack_sk" [PQCLEAN_DILITHIUM2_CLEAN_polyeta_unpack_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyt0_unpack_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_unpack_sk_setup (prover "unpack_sk");

    let PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_signature_setup = do {
      let siglen = CRYPTO_BYTES; // TODO: make configurable
      let mlen = 128; // TODO: make configurable
      sigp <- alloc_bytes siglen;
      siglenp <- crucible_alloc i64;
      (mp, m) <- fresh_bytes "m" mlen;
      (skp, sk) <- fresh_bytes "sk" CRYPTO_SECRETKEYBYTES;
      crucible_execute_func [sigp, siglenp, mp, tm {{ `mlen : [64] }}, skp];
      sig <- crucible_fresh_var "sig" (llvm_array siglen i8);
      siglent <- crucible_fresh_var "siglen" i64;
      crucible_points_to sigp (tm sig);
      crucible_points_to siglenp (tm siglent);
      crucible_points_to mp (tm m);
      crucible_points_to skp (tm sk);
      crucible_return (tm {{ 0 : [32] }});
    };
    // TODO: depends on shake256
    // Name: PQCLEAN_DILITHIUM2_CLEAN_unpack_sk
    PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_signature_method_spec <- assume MODULE "PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_signature" [PQCLEAN_DILITHIUM2_CLEAN_challenge_method_spec, PQCLEAN_DILITHIUM2_CLEAN_expand_mat_method_spec, PQCLEAN_DILITHIUM2_CLEAN_pack_sig_method_spec, PQCLEAN_DILITHIUM2_CLEAN_poly_invntt_montgomery_method_spec, PQCLEAN_DILITHIUM2_CLEAN_poly_ntt_method_spec, PQCLEAN_DILITHIUM2_CLEAN_poly_pointwise_invmontgomery_method_spec, PQCLEAN_DILITHIUM2_CLEAN_poly_reduce_method_spec, PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_gamma1m1_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyveck_add_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyveck_chknorm_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyveck_csubq_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyveck_decompose_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyveck_freeze_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyveck_make_hint_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyveck_ntt_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyveck_sub_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyvecl_add_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyvecl_chknorm_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyvecl_freeze_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyvecl_ntt_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyvecl_pointwise_acc_invmontgomery_method_spec, PQCLEAN_DILITHIUM2_CLEAN_unpack_sk_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_signature_setup (prover "crypto_sign_signature");

    let PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_setup = do {
      let mlen = 128; // TODO: make configurable
      let smlen = {{ `CRYPTO_BYTES + `mlen : [64] }};
      smp <- alloc_bytes (eval_int smlen);
      smlenp <- crucible_alloc i64;
      (mp, m) <- fresh_bytes "m" mlen;
      (skp, sk) <- fresh_bytes "sk" CRYPTO_SECRETKEYBYTES;
      crucible_execute_func [smp, smlenp, mp, tm {{ `mlen : [64] }}, skp];
      sm <- crucible_fresh_var "sm" (llvm_array (eval_int smlen) i8);
      smlent <- crucible_fresh_var "smlen" i64;
      crucible_points_to smp (tm sm);
      crucible_points_to smlenp (tm smlent);
      crucible_points_to mp (tm m);
      crucible_points_to skp (tm sk);
      crucible_return (tm {{ 0 : [32] }});
    };
    PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_crypto_sign" [PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_signature_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_setup (prover "crypto_sign");

    let PQCLEAN_DILITHIUM2_CLEAN_polyt1_pack_setup = do {
      rp <- alloc_bytes POLT1_SIZE_PACKED;
      (ap, a) <- fresh_poly "a";
      crucible_precond {{ standard_poly a}};
      crucible_execute_func [rp, ap];
      crucible_points_to rp (tm {{split (poly_pack (IPtoP a)):[_][8]}});
    };
    PQCLEAN_DILITHIUM2_CLEAN_polyt1_pack_method_spec <- verify' MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyt1_pack" [] false PQCLEAN_DILITHIUM2_CLEAN_polyt1_pack_setup (prover "polyt1_pack");

    let PQCLEAN_DILITHIUM2_CLEAN_pack_pk_setup = do {
      pkp <- alloc_bytes CRYPTO_PUBLICKEYBYTES;
      (rhop, rho) <- fresh_bytes "rho" SEEDBYTES;
      (t1p, t1) <- fresh_polyvec "t1" K;
      crucible_precond {{standard_polyvec t1}};
      crucible_execute_func [pkp, rhop, t1p];
      crucible_postcond {{ pack_pk_imp rho (join t1) }};

    };
    PQCLEAN_DILITHIUM2_CLEAN_pack_pk_method_spec <- verify' MODULE "PQCLEAN_DILITHIUM2_CLEAN_pack_pk" [PQCLEAN_DILITHIUM2_CLEAN_polyt1_pack_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_pack_pk_setup (prover "pack_pk");

    let PQCLEAN_DILITHIUM2_CLEAN_polyeta_pack_setup = do {
      rp <- alloc_bytes POLETA_SIZE_PACKED;
      (ap, a) <- fresh_poly "a";
      crucible_precond {{ polybound (`Q - `ETA) (`Q + `ETA) a }};
      crucible_execute_func [rp, ap];
      crucible_points_to rp (tm {{ pack_polyeta_imp [a] }});
    };
    PQCLEAN_DILITHIUM2_CLEAN_polyeta_pack_method_spec <- verify' MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyeta_pack" [] false PQCLEAN_DILITHIUM2_CLEAN_polyeta_pack_setup (prover "polyeta_pack");

    let PQCLEAN_DILITHIUM2_CLEAN_polyt0_pack_setup = do {
      rp <- alloc_bytes POLT0_SIZE_PACKED;
      (ap, a) <- fresh_poly "a";
      crucible_precond {{ polybound' (`Q - (2^^(`D - 1))) (`Q + (2^^(`D - 1))) a }};
      crucible_execute_func [rp, ap];
      crucible_points_to rp (tm {{ split (polyt0_pack (IPtoP a)) : [_][8] }});
    };
    // TODO: counterexample
    PQCLEAN_DILITHIUM2_CLEAN_polyt0_pack_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyt0_pack" [] false PQCLEAN_DILITHIUM2_CLEAN_polyt0_pack_setup (prover "polyt0_pack");

    let PQCLEAN_DILITHIUM2_CLEAN_pack_sk_setup = do {
      skp <- alloc_bytes CRYPTO_SECRETKEYBYTES;
      (rhop, rho) <- fresh_bytes "rho" SEEDBYTES;
      (keyp, key) <- fresh_bytes "key" SEEDBYTES;
      (trp, tr) <- fresh_bytes "tr" CRHBYTES;
      (s1p, s1) <- fresh_polyvec "s1" L;
      (s2p, s2) <- fresh_polyvec "s2" K;
      (t0p, t0) <- fresh_polyvec "t0" K;
      crucible_precond{{ True }};
      crucible_execute_func [skp, rhop, keyp, trp, s1p, s2p, t0p];
      crucible_postcond{{rho#key#tr #(pack_polyeta_imp s1)# (pack_polyeta_imp s2)#(split (polyt0_pack (IPtoP t0)) : [_][8])}};
    };
    PQCLEAN_DILITHIUM2_CLEAN_pack_sk_method_spec <- verify' MODULE "PQCLEAN_DILITHIUM2_CLEAN_pack_sk" [PQCLEAN_DILITHIUM2_CLEAN_polyeta_pack_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyt0_pack_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_pack_sk_setup (prover "pack_sk");

    let PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_eta_setup = do {
      ap <- alloc_poly;
      (seedp, seed) <- fresh_bytes "seed" SEEDBYTES;
      nonce <- crucible_fresh_var "nonce" (llvm_int 16);
      crucible_execute_func [ap, seedp, tm nonce];
      crucible_points_to seedp (tm seed);
      assign_fresh_poly ap "a";
    };
    // NB: we aren't going to verify this function
    PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_eta_method_spec <- assume MODULE "PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_eta" [/*PQCLEAN_DILITHIUM2_CLEAN_shake128_stream_init_method_spec*/] false PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_eta_setup (prover "poly_uniform_eta");

    let PQCLEAN_DILITHIUM2_CLEAN_power2round_setup = do {
      a <- crucible_fresh_var "a" (llvm_int 32);
      a0p <- crucible_alloc (llvm_int 32);
      crucible_precond {{ standard a }};
      crucible_execute_func [tm a, a0p];
      let res = {{ Power2Round `Q (drop a, `D) }};
      let a0 = {{ sext (res.1) : [32] }};
      let a1 = {{ sext (res.0) : [32] }};
      crucible_points_to a0p (tm {{ `Q + a0 }});
      crucible_return (tm {{ a1 }});
      crucible_postcond {{ a % `Q == a1*(2^^`D) + a0 }};
      crucible_postcond {{ (0 - 2)^^(`D - 1) <$ a0 }};
      crucible_postcond {{ a0 <=$ 2^^(`D - 1) }};
    };
    PQCLEAN_DILITHIUM2_CLEAN_power2round_method_spec <- verify' MODULE "PQCLEAN_DILITHIUM2_CLEAN_power2round" [] false PQCLEAN_DILITHIUM2_CLEAN_power2round_setup (prover "power2round");

    let PQCLEAN_DILITHIUM2_CLEAN_poly_power2round_setup = do {
      a0p <- alloc_poly;
      a1p <- alloc_poly;
      (ap, a) <- fresh_poly "a";
      crucible_precond {{ standard_poly a }};
      crucible_execute_func [a0p, a1p, ap];
      let res = {{ polyPower2Round (IPtoP a) }};
      crucible_points_to a0p (tm {{ PtoIP (res.0) }});
      crucible_points_to a1p (tm {{ PtoIP (res.1) }});
      crucible_points_to ap (tm a);
    };
    // TODO: counterexample after a while
    PQCLEAN_DILITHIUM2_CLEAN_poly_power2round_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_poly_power2round" [PQCLEAN_DILITHIUM2_CLEAN_power2round_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_poly_power2round_setup (unint_prover "poly_power2round" ["Power2Round"]);

    let PQCLEAN_DILITHIUM2_CLEAN_polyveck_power2round_setup = do {
      a0p <- alloc_polyvec K;
      a1p <- alloc_polyvec K;
      (ap, a) <- fresh_polyvec "a" K;
      crucible_precond {{ standard_polyvec a }};
      crucible_execute_func [a0p, a1p, ap];
      let res = {{ Power2RoundV (IPVtoPV (a@0)) }};
      crucible_points_to a0p (tm {{ [PVtoIPV (res.0)] }});
      crucible_points_to a1p (tm {{ [PVtoIPV (res.1)] }});
    };
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_power2round_method_spec <- verify' MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyveck_power2round" [PQCLEAN_DILITHIUM2_CLEAN_poly_power2round_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_polyveck_power2round_setup (unint_prover "polyveck_power2round" ["polyPower2Round"]);

    let PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_keypair_setup = do {
      pkp <- alloc_bytes CRYPTO_PUBLICKEYBYTES;
      skp <- alloc_bytes CRYPTO_SECRETKEYBYTES;
      crucible_execute_func [pkp, skp];
      pk <- crucible_fresh_var "pk" (llvm_array CRYPTO_PUBLICKEYBYTES i8);
      sk <- crucible_fresh_var "pk" (llvm_array CRYPTO_SECRETKEYBYTES i8);
      crucible_points_to pkp (tm pk);
      crucible_points_to skp (tm sk);
      crucible_return (tm {{ 0 : [32] }});
    };
    // TODO: various overrides not correct yet
    PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_keypair_method_spec <- assume MODULE "PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_keypair" [PQCLEAN_DILITHIUM2_CLEAN_expand_mat_method_spec, PQCLEAN_DILITHIUM2_CLEAN_pack_pk_method_spec, PQCLEAN_DILITHIUM2_CLEAN_pack_sk_method_spec, PQCLEAN_DILITHIUM2_CLEAN_poly_invntt_montgomery_method_spec, PQCLEAN_DILITHIUM2_CLEAN_poly_reduce_method_spec, PQCLEAN_DILITHIUM2_CLEAN_poly_uniform_eta_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyveck_add_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyveck_freeze_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyveck_power2round_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyvecl_ntt_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyvecl_pointwise_acc_invmontgomery_method_spec,randombytes_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_keypair_setup (prover "keypair");

    let PQCLEAN_DILITHIUM2_CLEAN_polyveck_invntt_montgomery_setup = do {
      (ap, a) <- fresh_polyvec "a" K;
      crucible_execute_func [ap];
    };
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_invntt_montgomery_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyveck_invntt_montgomery" [PQCLEAN_DILITHIUM2_CLEAN_poly_invntt_montgomery_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_polyveck_invntt_montgomery_setup (prover "polyveck_invntt_montgomery");

    let PQCLEAN_DILITHIUM2_CLEAN_polyveck_reduce_setup = do {
      (ap, a) <- fresh_polyvec "a" K;
      crucible_execute_func [ap];
    };
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_reduce_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyveck_reduce" [PQCLEAN_DILITHIUM2_CLEAN_poly_reduce_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_polyveck_reduce_setup (prover "polyveck_reduce");

    let PQCLEAN_DILITHIUM2_CLEAN_poly_shiftl_setup = do {
      (ap, a) <- fresh_poly "a";
      crucible_execute_func [ap];
      crucible_points_to ap (tm {{ poly_shiftl_imp a }});
    };
    PQCLEAN_DILITHIUM2_CLEAN_poly_shiftl_method_spec <- verify' MODULE "PQCLEAN_DILITHIUM2_CLEAN_poly_shiftl" [] false PQCLEAN_DILITHIUM2_CLEAN_poly_shiftl_setup (prover "poly_shiftl");

    let PQCLEAN_DILITHIUM2_CLEAN_polyveck_shiftl_setup = do {
      (ap, a) <- fresh_polyvec "a" K;
      crucible_execute_func [ap];
    };
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_shiftl_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyveck_shiftl" [PQCLEAN_DILITHIUM2_CLEAN_poly_shiftl_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_polyveck_shiftl_setup (prover "polyveck_shiftl");

    let PQCLEAN_DILITHIUM2_CLEAN_use_hint_setup = do {
      arg0 <- crucible_fresh_var "arg0" (llvm_int 32);
      arg1 <- crucible_fresh_var "arg1" (llvm_int 32);
      crucible_execute_func [tm arg0, tm arg1];
      ret <- crucible_fresh_var "return" (llvm_int 32);
      crucible_return (tm ret);
    };
    PQCLEAN_DILITHIUM2_CLEAN_use_hint_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_use_hint" [] false PQCLEAN_DILITHIUM2_CLEAN_use_hint_setup (prover "use_hint");

    let PQCLEAN_DILITHIUM2_CLEAN_poly_use_hint_setup = do {
      ap <- alloc_poly;
      (bp, b) <- fresh_poly "b";
      (hp, h) <- fresh_poly "h";
      crucible_execute_func [ap, bp, hp];
      assign_fresh_poly ap "a";
      crucible_points_to bp (tm b);
      crucible_points_to hp (tm h);
    };
    PQCLEAN_DILITHIUM2_CLEAN_poly_use_hint_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_poly_use_hint" [PQCLEAN_DILITHIUM2_CLEAN_use_hint_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_poly_use_hint_setup (prover "poly_use_hint");

    let PQCLEAN_DILITHIUM2_CLEAN_polyveck_use_hint_setup = do {
      wp <- alloc_polyvec K;
      (up, u) <- fresh_polyvec "u" K;
      (hp, h) <- fresh_polyvec "h" K;
      crucible_execute_func [wp, up, hp];
      assign_fresh_polyvec K wp "w";
      crucible_points_to up (tm u);
      crucible_points_to hp (tm h);
    };
    PQCLEAN_DILITHIUM2_CLEAN_polyveck_use_hint_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyveck_use_hint" [PQCLEAN_DILITHIUM2_CLEAN_poly_use_hint_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_polyveck_use_hint_setup (prover "polyveck_use_hint");

    let PQCLEAN_DILITHIUM2_CLEAN_polyt1_unpack_setup = do {
      rp <- alloc_poly;
      (ap, a) <- fresh_bytes "r" POLT1_SIZE_PACKED;
      crucible_execute_func [rp, ap];
      crucible_points_to ap (tm a);
      assign_fresh_poly rp "r";
    };
    PQCLEAN_DILITHIUM2_CLEAN_polyt1_unpack_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyt1_unpack" [] false PQCLEAN_DILITHIUM2_CLEAN_polyt1_unpack_setup (prover "polyt1_unpack");

    let PQCLEAN_DILITHIUM2_CLEAN_unpack_pk_setup = do {
      rhop <- alloc_bytes SEEDBYTES;
      t1p <- alloc_polyvec K;
      (pkp, pk) <- fresh_bytes "pk" CRYPTO_PUBLICKEYBYTES;
      crucible_execute_func [rhop, t1p, pkp];
      assign_fresh_bytes SEEDBYTES rhop "rho";
      assign_fresh_polyvec K t1p "t1";
      crucible_points_to pkp (tm pk);
    };
    PQCLEAN_DILITHIUM2_CLEAN_unpack_pk_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_unpack_pk" [PQCLEAN_DILITHIUM2_CLEAN_polyt1_unpack_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_unpack_pk_setup (prover "unpack_pk");

    let PQCLEAN_DILITHIUM2_CLEAN_polyz_unpack_setup = do {
      rp <- alloc_poly;
      (ap, a) <- fresh_bytes "a" POLZ_SIZE_PACKED;
      crucible_execute_func [rp, ap];
      crucible_points_to ap (tm a);
      assign_fresh_poly rp "r";
    };
    PQCLEAN_DILITHIUM2_CLEAN_polyz_unpack_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_polyz_unpack" [] false PQCLEAN_DILITHIUM2_CLEAN_polyz_unpack_setup (prover "polyz_unpack");

    let PQCLEAN_DILITHIUM2_CLEAN_unpack_sig_setup = do {
      zp <- alloc_polyvec L;
      hp <- alloc_polyvec K;
      cp <- alloc_poly;
      (sigp, sig) <- fresh_bytes "sig" CRYPTO_BYTES;
      crucible_execute_func [zp, hp, cp, sigp];
      assign_fresh_polyvec L zp "z";
      assign_fresh_polyvec K hp "h";
      assign_fresh_poly cp "c";
      crucible_return (tm {{ 0 : [32] }});
    };
    // TODO: hangs applying override, using tons of memory
    PQCLEAN_DILITHIUM2_CLEAN_unpack_sig_method_spec <- assume MODULE "PQCLEAN_DILITHIUM2_CLEAN_unpack_sig" [PQCLEAN_DILITHIUM2_CLEAN_polyz_unpack_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_unpack_sig_setup (prover "unpack_sig");

    let PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_verify_setup = do {
      let siglen = CRYPTO_BYTES; // TODO: make configurable
      let mlen = 128; // TODO: make configurable
      (sigp, sig) <- fresh_bytes "sig" siglen;
      (mp, m) <- fresh_bytes "m" mlen;
      (pkp, pk) <- fresh_bytes "pk" CRYPTO_PUBLICKEYBYTES;
      crucible_execute_func [sigp, tm {{ `siglen : [64] }}, mp, tm {{ `mlen : [64] }}, pkp];
      ret <- crucible_fresh_var "return" (llvm_int 32);
      crucible_return (tm ret);
    };
    // TODO: All overrides failed during structural matching
    // Name: PQCLEAN_DILITHIUM2_CLEAN_unpack_pk
    // Also uses shake256
    PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_verify_method_spec <- assume MODULE "PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_verify" [PQCLEAN_DILITHIUM2_CLEAN_challenge_method_spec, PQCLEAN_DILITHIUM2_CLEAN_expand_mat_method_spec, PQCLEAN_DILITHIUM2_CLEAN_poly_ntt_method_spec, PQCLEAN_DILITHIUM2_CLEAN_poly_pointwise_invmontgomery_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyveck_csubq_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyveck_invntt_montgomery_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyveck_ntt_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyveck_reduce_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyveck_shiftl_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyveck_sub_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyveck_use_hint_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyvecl_chknorm_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyvecl_ntt_method_spec, PQCLEAN_DILITHIUM2_CLEAN_polyvecl_pointwise_acc_invmontgomery_method_spec, PQCLEAN_DILITHIUM2_CLEAN_unpack_pk_method_spec, PQCLEAN_DILITHIUM2_CLEAN_unpack_sig_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_verify_setup (prover "crypto_sign_verify");

    let PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_open_setup = do {
      let smlen = 128; // TODO: make configurable
      mp <- alloc_bytes smlen;
      mlenp <- crucible_alloc i64;
      (smp, sm) <- fresh_bytes "sm" smlen;
      (pkp, pk) <- fresh_bytes "pk" CRYPTO_PUBLICKEYBYTES;
      crucible_execute_func [mp, mlenp, smp, tm {{ `smlen : [64] }}, pkp];
      ret <- crucible_fresh_var "return" (llvm_int 32);
      crucible_return (tm ret);
    };
    // TODO: Pointer passed to `memset` didn't point to a mutable allocation with enough space.
    PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_open_method_spec <- verify MODULE "PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_open" [PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_verify_method_spec] false PQCLEAN_DILITHIUM2_CLEAN_crypto_sign_open_setup (prover "crypto_sign_open");
    return ();
};

prove_dilithium dilithium2 1;
