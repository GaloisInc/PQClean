/*
   This module implements the digital signature scheme Dilithium
   submitted to the NIST post-quantum project.

   See https://pq-crystals.org/dilithium/data/dilithium-specification.pdf
   Copyright (c) 2021, Galois Inc.
   www.cryptol.net
   You can freely use this source code for educational purposes.
   Authors: Ajay Kumar Eeralla and Aaron Tomb
*/
module DilithiumAux where
import Array
import Primitive::Asymmetric::Signature::Dilithium::Round2::DilithiumMedium
import Common::mod_arith (mod_pow)
import Primitive::Keyless::Hash::keccak as SHA3 (SHAKE256)
import NTTIdx

type ByteArray = Array [64] [8]

// Dilithium II (Medium) parameters
//type K = 4
//type L = 3
//ETA = 6
//BETA = 325
//type Omega = 80

// a1 and a0 represent low, high order bits respectively.
decomposePc (a1 : [23]) (a0 : [23]) (a : [23]) =
  if a1 != (`Q - 1)/ALPHA
  // This is satisfied by decompose but not decomposeNew
  then mod_pow(`Q, a, 1) == a1*ALPHA + a0 /\ -ALPHA/2 <$ a0 /\ a0 <=$ ALPHA/2
  // This is satisfied by decomposeNew and decompose
  else a1 == 0 /\ a0 == mod_pow(`Q, a, 1) - `Q  /\ -ALPHA/2 <=$ a0 /\ a0 <$ 0
                               
decomposePolyPc : Poly -> Poly -> Poly -> Bit 
decomposePolyPc plb phb p = and [ decomposePc a1 a0 a | a1 <- plb | a0 <- phb | a <- p ]

decomposePolyVecPc : { n } (fin n, n >= 1) => PolyVec n -> PolyVec n -> PolyVec n -> Bit 
decomposePolyVecPc pvlb pvhb pv = and [ decomposePolyPc plb phb p | plb <- pvlb | phb <- pvhb | p <- pv ]

property decomposePcGood (a:[23]) =
  0 <$ a /\ a <$ `Q ==>
  (decomposePc a1 a0 a /\ decomposePc (drop a1n) (drop a0n) a)
    where
      (a1, a0) = decompose a
      (a1n, a0n) = decomposeNew (sext a)

property decomposeEq (a : [23]) = 0 <$ a /\ a <$ `Q ==> sext a0 == a0n /\ sext a1 == a1n
  where
    (a1, a0) = decompose a
    (a1n, a0n) = decomposeNew (sext a)


// Cryptol utilities
   
montgomeryReduce : [64] -> [32]
montgomeryReduce a = drop ((a + (((a * QINV) && 0x00000000ffffffff) * `Q)) >> 32)

property reduceGood (a : [54]) =
  mod_mul (`Q, zext (montgomeryReduce (zext a)), `M) == a % `Q
    where
      type M = (2 ^^ 32) % Q

reduce32 : [32] -> [32]
reduce32 a = (a && 0x007FFFFF) + (b << 13) - b
  where b = a >> 23

csubq : [32] -> [32]
csubq a = b + ((b >>$ 31) && `Q)
  where b = a - `Q

freeze a = csubq (reduce32 a)

type ImpPoly = [1][N][32]
type ImpPolyVec dim = [1][dim]ImpPoly

ipToP : ImpPoly -> Poly
ipToP [p] = map drop p

pToIP : Poly -> ImpPoly
pToIP p = [ map sext p ]

ipvToPv : {dim} (fin dim, dim >= 1) => ImpPolyVec dim -> PolyVec dim
ipvToPv [intp] = map ipToP intp

pvToIpv : {dim} (fin dim, dim >= 1) => PolyVec dim -> ImpPolyVec dim
pvToIpv pvec = [map pToIP pvec]

pmToIpm : {m, n} (fin m, fin n, n >= 1, m >= 1) => [m] (PolyVec n) -> [m] (ImpPolyVec n)
pmToIpm pmat = [ pvToIpv pvec | pvec <- pmat ]

ipmToPm: {m, n} (fin m, fin n, n >= 1, m >=1 ) => [m](ImpPolyVec n) ->  [m](PolyVec n)
ipmToPm pmat = [ ipvToPv pvec | pvec <- pmat ]

property pIPGood p =
  ipToP (pToIP p) == p

property ipPGood p =
  standardPoly p /\
  all (\w -> w < 0x00400000) (p@0) ==>
  pToIP (ipToP p) == p

// NB: different from spec, because it doesn't reduce
polyAddImp : ImpPoly -> ImpPoly -> ImpPoly
polyAddImp = (+)

polyVecAddImp : {n} (fin n, n >= 1) => ImpPolyVec n -> ImpPolyVec n -> ImpPolyVec n
polyVecAddImp [xs] [ys] = [ [ polyAddImp xp yp | xp <- xs | yp <- ys ] ]

// NB: different from spec, because it doesn't reduce
polySubImp : ImpPoly -> ImpPoly -> ImpPoly
polySubImp xs ys = [ [ x + 2*`Q - y | x <- xs@0 | y <- ys@0 ] ]

polyVecSubImp : {n} (fin n, n >= 1) => ImpPolyVec n -> ImpPolyVec n -> ImpPolyVec n
polyVecSubImp [xs] [ys] = [ [ polySubImp xp yp | xp <- xs | yp <- ys ] ]

polyReduceImp : ImpPoly -> ImpPoly
polyReduceImp xs = [ map reduce32 (xs@0) ]

polyVecReduceImp : {n} (fin n, n >= 1) => ImpPolyVec n -> ImpPolyVec n
polyVecReduceImp [xs] = [ map polyReduceImp xs ]

polyCsubqImp : ImpPoly -> ImpPoly
polyCsubqImp xs = [ map csubq (xs@0) ]

polyVecCsubqImp : {n}(fin n, n >= 1) => ImpPolyVec n -> ImpPolyVec n
polyVecCsubqImp [xs] = [ map polyCsubqImp xs ]

polyFreezeImp : ImpPoly -> ImpPoly
polyFreezeImp xs = [map freeze (xs@0)]

polyVecFreezeImp : {n}(fin n, n >= 1) => ImpPolyVec n -> ImpPolyVec n
polyVecFreezeImp [xs] = [ map polyFreezeImp xs ]

polyShiftlImp : ImpPoly -> ImpPoly
polyShiftlImp xs = [ [ x << `D | x <- (xs@0)] ]

polyVecShiftlImp : {dim} ImpPolyVec dim -> ImpPolyVec dim
polyVecShiftlImp [p] = [map polyShiftlImp p]

coeffBound low high c = low <$ c /\ c <$ high
coeffBoundGEq low high c = low <=$ c /\ c <$ high
coeffBoundLGEq low high c = low <=$ c /\ c <=$ high
coeffBoundLEq low high c = low <$ c /\ c <=$ high

polyBoundLEq : [32] -> [32] -> ImpPoly -> Bit
polyBoundLEq low high [xs] = all (coeffBoundLEq low high) xs

polyBoundLGEq : [32] -> [32] -> ImpPoly -> Bit
polyBoundLGEq low high [xs] = all (coeffBoundLGEq low high) xs

polyBound : [32] -> [32] -> ImpPoly -> Bit
polyBound low high [xs] = all (coeffBound low high) xs


polyBoundGEq : [32] -> [32] -> ImpPoly -> Bit
polyBoundGEq low high [xs] = all (coeffBoundGEq low high) xs

polyVecBound : {m} (fin m, m >= 1) => [32] -> [32] -> ImpPolyVec m  -> Bit
polyVecBound low high [xs] = and [ (polyBound low high p) | p <- xs ]

polyVecBoundGEq : {m} (fin m, m >= 1) => [32] -> [32] -> ImpPolyVec m  -> Bit
polyVecBoundGEq low high [xs] = and [ (polyBoundGEq low high p) | p <- xs ]

polyVecBoundLEq : {m} (fin m, m >= 1) => [32] -> [32] -> ImpPolyVec m  -> Bit
polyVecBoundLEq low high [xs] = and [ (polyBoundLEq low high p) | p <- xs ]

packPolyEtaImp : ImpPoly -> [PolEtaSizePacked][8]
packPolyEtaImp a = split (packPolyEta (ipToP a))

packPkImp : [SeedBytes][8] -> ImpPolyVec K -> [CryptoPublicKeyBytes][8]
packPkImp rho t1 = split (packPk rho (ipvToPv t1))

reducePoly : Poly -> Poly
reducePoly p = map (\x -> x % `Q) p

starts : {len} (fin len, len > 0, 32 >= width (max 256 (2 * len))) => [_][32]
starts = [0, (2*len) .. N-1]

js : {len} (fin len, 32 >= width len, len >= 1) => [32] -> [len][32]
js start = [ start + j | j <- [0..len-1] ]

idxs : {len} (fin len, len > 0, 32 >= width len, 32 >= width (max 256 (2 * len))) => [_][32]
idxs = [ j | start <- starts `{len}, j <- js `{len} start ]

args : {len} (fin len, len > 0, 32 >= width len, 32 >= width (max 256 (2 * len))) => [_]([32], [32], [32])
args = [ (`len, 2 /* TODO: zeta */, j) | j <- idxs `{len} ]

nttImpFold : ImpPoly -> ImpPoly
nttImpFold p = foldl nttImpBody p nttidxs
  /*
  where
    allArgs = args`{128} # args`{64} # args`{32} # args`{16} #
              args`{8}   # args`{4}  # args`{2}  # args`{1}
              */

nttImpFold2 : ImpPoly -> ImpPoly
nttImpFold2 p = foldl nttImpBody2Wrap p nttidxs

type MONT = 4193792

nttInvImpFold : ImpPoly -> ImpPoly
nttInvImpFold p = [map invReduce pmid]
  where
    f : [32]
    f = fromInteger (((`MONT * `MONT % `Q) * (`Q - 1) % `Q) * ((`Q - 1) / 256) % `Q)
    invReduce pj = nttReduce f pj
    [pmid] = foldl nttInvImpBody p nttinvidxs
    /*
    allArgs = args`{1}  # args`{2}  # args`{4}  # args`{8} #
              args`{16} # args`{32} # args`{64} # args`{128}
              */

nttInvImpFold2 : ImpPoly -> ImpPoly
nttInvImpFold2 p = [map invReduce pmid]
  where
    f : [32]
    //f = 0x0000a3fa
    f = 0x0000a3fa //fromInteger (((`MONT * `MONT % `Q) * (`Q - 1) % `Q) * ((`Q - 1) / 256) % `Q)
    invReduce pj = nttReduce f pj
    [pmid] = foldl nttInvImpBody2Wrap p nttinvidxs

nttImpBody : ImpPoly -> ([32], [32], [32]) -> ImpPoly
nttImpBody [p] (len, zeta, j) = [p'']
  where
    t = nttReduce zeta (p@(j + len))
    p' = update p (j + len) ((p@j) + 2*`Q - t)
    p'' = update p' j ((p@j) + t)

nttImpBody2 : ([32], [32], [32]) -> ([32], [32])
nttImpBody2 (zeta, pj, pjlen) = (pj', pjlen')
  where
    t = nttReduce zeta pjlen
    pjlen' = pj + 2*`Q - t
    pj' = pj + t

nttImpBody2Wrap : ImpPoly -> ([32], [32], [32]) -> ImpPoly
nttImpBody2Wrap [p] (len, zeta, j) = [p']
  where
    (pj', pjlen') = nttImpBody2 (zeta, (p@j), (p@(j + len)))
    p' = update (update p (j + len) pjlen') j pj'

property bodyBody2 p len zeta j = j < 256 /\ j + len < 256 /\ j != len ==> p' == p''
  where
    p' = nttImpBody2Wrap p  (len, zeta, j)
    p'' = nttImpBody p (len, zeta, j)

nttInvImpBody : ImpPoly -> ([32], [32], [32]) -> ImpPoly
nttInvImpBody [p] (len, zeta, j) = [p''']
  where
    t = p@j
    p' = update p j (t + p@(j + len))
    t' = t + 256*`Q - p'@(j + len)
    p'' = update p' (j + len) t'
    p''' = update p'' (j + len) (nttReduce zeta t')

nttInvImpBody2 : ([32], [32], [32]) -> ([32], [32])
nttInvImpBody2 (zeta, pj, pjlen) = (pj', pjlen')
  where
    pj' = pj + pjlen
    pjlen' = nttReduce zeta (pj + 256*`Q - pjlen)

nttInvImpBody2Wrap : ImpPoly -> ([32], [32], [32]) -> ImpPoly
nttInvImpBody2Wrap [p] (len, zeta, j) = [p']
  where
    (pj', pjlen') = nttInvImpBody2 (zeta, (p@j), (p@(j + len)))
    p' = update (update p (j + len) pjlen') j pj'

nttReduce : [32] -> [32] -> [32]
nttReduce zeta pj = montgomeryReduce (zext zeta * zext pj)

modEqual : ImpPoly -> ImpPoly -> Bit
modEqual [p1] [p2] = and [ p1e % `Q == p2e % `Q | p1e <- p1 | p2e <- p2 ]

property nttInvGood (p:[N][22]) =
  modEqual (nttInvImpFold (nttImpFold p')) p'
    where p' = [map zext p]

zetas : [N][32]
zetas = [
    0, 25847, 5771523, 7861508, 237124, 7602457, 7504169, 466468, 1826347,
    2353451, 8021166, 6288512, 3119733, 5495562, 3111497, 2680103, 2725464,
    1024112, 7300517, 3585928, 7830929, 7260833, 2619752, 6271868, 6262231,
    4520680, 6980856, 5102745, 1757237, 8360995, 4010497, 280005, 2706023,
    95776, 3077325, 3530437, 6718724, 4788269, 5842901, 3915439, 4519302,
    5336701, 3574422, 5512770, 3539968, 8079950, 2348700, 7841118, 6681150,
    6736599, 3505694, 4558682, 3507263, 6239768, 6779997, 3699596, 811944,
    531354, 954230, 3881043, 3900724, 5823537, 2071892, 5582638, 4450022,
    6851714, 4702672, 5339162, 6927966, 3475950, 2176455, 6795196, 7122806,
    1939314, 4296819, 7380215, 5190273, 5223087, 4747489, 126922, 3412210,
    7396998, 2147896, 2715295, 5412772, 4686924, 7969390, 5903370, 7709315,
    7151892, 8357436, 7072248, 7998430, 1349076, 1852771, 6949987, 5037034,
    264944, 508951, 3097992, 44288, 7280319, 904516, 3958618, 4656075, 8371839,
    1653064, 5130689, 2389356, 8169440, 759969, 7063561, 189548, 4827145,
    3159746, 6529015, 5971092, 8202977, 1315589, 1341330, 1285669, 6795489,
    7567685, 6940675, 5361315, 4499357, 4751448, 3839961, 2091667, 3407706,
    2316500, 3817976, 5037939, 2244091, 5933984, 4817955, 266997, 2434439,
    7144689, 3513181, 4860065, 4621053, 7183191, 5187039, 900702, 1859098,
    909542, 819034, 495491, 6767243, 8337157, 7857917, 7725090, 5257975,
    2031748, 3207046, 4823422, 7855319, 7611795, 4784579, 342297, 286988,
    5942594, 4108315, 3437287, 5038140, 1735879, 203044, 2842341, 2691481,
    5790267, 1265009, 4055324, 1247620, 2486353, 1595974, 4613401, 1250494,
    2635921, 4832145, 5386378, 1869119, 1903435, 7329447, 7047359, 1237275,
    5062207, 6950192, 7929317, 1312455, 3306115, 6417775, 7100756, 1917081,
    5834105, 7005614, 1500165, 777191, 2235880, 3406031, 7838005, 5548557,
    6709241, 6533464, 5796124, 4656147, 594136, 4603424, 6366809, 2432395,
    2454455, 8215696, 1957272, 3369112, 185531, 7173032, 5196991, 162844,
    1616392, 3014001, 810149, 1652634, 4686184, 6581310, 5341501, 3523897,
    3866901, 269760, 2213111, 7404533, 1717735, 472078, 7953734, 1723600,
    6577327, 1910376, 6712985, 7276084, 8119771, 4546524, 5441381, 6144432,
    7959518, 6094090, 183443, 7403526, 1612842, 4834730, 7826001, 3919660,
    8332111, 7018208, 3937738, 1400424, 7534263, 1976782
]

nttDirect : ImpPoly -> ImpPoly
nttDirect [p] = [nttp]
    where
    exponents = join [ [zext i, (256+(zext i))] | i <- [reverse ((128+i) : [8]) | i <- [0..127] ] ]
    nttp = [ sum [ montgomeryReduce (zext (p@i) * zext (zetas@i)) // TODO: not correct
                 | i <- [0..(N - 1)]:[N][32]
                 ]
           | k <- exponents : [_][32]
           ]


nttImp : ImpPoly -> ImpPoly
nttImp a = nttImpFold2 a // pToIP (nttNew (ipToP a))

nttVecImp : {n} (fin n, n >= 1) => ImpPolyVec n -> ImpPolyVec n
nttVecImp [xs] = [map nttImp xs]

nttInvImp : ImpPoly -> ImpPoly
nttInvImp a = nttInvImpFold2 a // pToIP (nttInv (ipToP a))

nttInvVecImp : {n} (fin n, n >= 1) => ImpPolyVec n -> ImpPolyVec n
nttInvVecImp [xs] = [ map nttInvImp xs ]

nttPolyMultImp : ImpPoly -> ImpPoly -> ImpPoly
nttPolyMultImp [p1] [p2] = [ [ montgomeryReduce (zext x * zext y) | x <- p1 | y <- p2 ] ]

nttDotProductImp : { dim } (fin dim) => ImpPolyVec dim -> ImpPolyVec dim -> ImpPoly
nttDotProductImp [v1] [v2] =
  foldl polyAddImp zero [ nttPolyMultImp p1 p2 | p1 <- v1 | p2 <- v2 ]

standardByte : [8] -> Bit
standardByte a = 0 < (zext a : [23]) /\ (zext a : [23]) < `Q 

standardBytes a = all standardByte a

standard a = 0 <= a /\ a < `Q
standardPoly [p] = all standard p
standardPolyVec : {a} (fin a) => ImpPolyVec a -> Bit
standardPolyVec [v] = all standardPoly v

reducedBound a = 0 <= a /\ a < 2*`Q
reducedBoundPoly [p] = all reducedBound p
reducedBoundPolyVec [v] = all reducedBoundPoly v

bitCoeff a = a == 0 \/ a == 1
bitCoeffPoly [a] = all bitCoeff a

bitCoeffPolyVec : {a} (fin a) => ImpPolyVec a -> Bit
bitCoeffPolyVec [a] = all bitCoeffPoly a

byteBound low high c = low <= c /\ c <= high

addQToPoly : Poly -> ImpPoly
addQToPoly p = [ [ (sext c0) + `Q | c0 <- p] ]

addQToPolyVec : {n} (fin n, n >= 1) => PolyVec n -> ImpPolyVec n
addQToPolyVec pv = [ map addQToPoly pv ]

skTupleToRec : ([SeedBytes][8], [SeedBytes][8], [CrhBytes][8], PolyVec L, PolyVec K, IntPolyVec K) -> SecretKey
skTupleToRec t = { rho = join t.0, key = join t.1, tr = join t.2, s1 = t.3, s2 = t.4, t0 = t.5 }

pkBytesToRec : [CryptoPublicKeyBytes][8] -> PublicKey
pkBytesToRec pk = { rho = join rho, t1 = t1 }
  where (rho, t1) = unpackPk pk

// polyChkNorm (from source code)
polyChkNormImp : ImpPoly -> [32] -> Bit
polyChkNormImp [a] b = or [ res i >= b | i <- [0..N-1] ]
  where
    t i = ((`Q - 1) / 2) - a@i
    y x = x ^ (x >>$ 31)
    res i = ((`Q - 1) / 2) - (y (t i))

// polyVecKChkNorm (from source code)
polyVecChkNormImp : { n } (fin n, n >= 1) => ImpPolyVec n -> [32] -> Bit
polyVecChkNormImp [pv] b = or [ polyChkNormImp p b | p <- pv ]

useHintPolyImp : ImpPoly -> ImpPoly -> ImpPoly
useHintPolyImp [rp] [hp] =
  [ [ zext (useHint (drop r, drop h)) | r <- rp | h <- hp ] ]

useHintPolyVecImp : { n }(fin n, n >= 1) => (ImpPolyVec n, ImpPolyVec n) -> ImpPolyVec n
useHintPolyVecImp ([rv], [hv]) =
  [ [ useHintPolyImp hpoly rpoly
    | hpoly <- hv
    | rpoly <- rv
    ] ]

type Shake256State = [26][64]

keccak_init : Shake256State
keccak_init = zero // TODO

keccak_absorb : {a} Shake256State -> [a][8] -> Shake256State
keccak_absorb s m = zero // join (transpose (absorb`{w=64} (pad`{r= (RATE*8)} (join [reverse x | x<-m]#0b1111)))) }};// TODO

keccak_squeeze : Shake256State -> [CrhBytes][8]
keccak_squeeze s = zero // join (transpose(Keccak_f(transpose (split s:[5][5][64])))) // TODO

keccak_finalize : Shake256State -> Shake256State
keccak_finalize s = s // TODO

shake256 = SHA3::SHAKE256

verifyImp :
  { mbytes }
  (fin mbytes, mbytes >= 0) =>
  [CryptoPublicKeyBytes][8] -> [mbytes][8] -> [SigSizePacked][8] -> Bit
verifyImp pk m sig = /*crit1 &&*/ crit2 // && crit3 // TODO: other criteria
  where
    (rho, t1) = unpackPk pk
    (z, h, c) = unpackSig sig
    z'        : ImpPolyVec L
    z'        = pvToIpv z
    h'        = pvToIpv h
    c'        = pToIP c
    crit1     = polyVecChkNormImp z' (GAMMA1 - zext BETA)
    mu0       : [_][8]
    mu0       = split (crh (join pk))
    s0        = keccak_init
    s1        = keccak_absorb s0 mu0
    s2        = keccak_absorb s1 m
    s3        = keccak_finalize s2
    mu        = keccak_squeeze s3
    mat       = map pvToIpv (expandA rho)
    zntt      = nttVecImp z'
    tmp1      = [ map (\row -> nttDotProductImp row zntt) mat ]
    chat      = nttImp c'
    t1'       : ImpPolyVec K
    t1'       = pvToIpv t1
    t1''      = nttVecImp (polyVecShiftlImp t1')
    tmp2      = [ map (\row -> nttPolyMultImp chat row) (t1'@0) ]
    tmp1'     = polyVecCsubqImp (nttInvVecImp (polyVecReduceImp (polyVecSubImp tmp1 tmp2)))
    w1        = useHintPolyVecImp (tmp1', h')
    cp        = pToIP (hash (join mu, ipvToPv w1))
    crit2     = c' == cp

openImp :
  { smbytes }
  (fin smbytes, smbytes >= SigSizePacked, 64 >= width (smbytes - 2044)) =>
  [CryptoPublicKeyBytes][8] -> [smbytes][8] -> ([smbytes-SigSizePacked][8], [64], [32])
openImp pk sm =
  if verifyImp pk m sig then (m, `(smbytes-SigSizePacked), 0) else (zero, -1, -1)
    where
      sig = take sm
      m = drop sm